#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define f(i,n) for(int i=0; i<n; i++)
#define fab(i,a,b) for(int i=a; i<=b; i++)
class SortishDiv2 {
public:
	int getStdness(vector<int>& v)
	{
		int s = v.size(), cnt = 0;
		f(i,s)
		{
			fab(j,i+1,s-1)
			{
				if(v[i] < v[j])
					cnt++;
			}
		}
		return cnt;
	}
	int ways(int sortedness, vector <int> seq) 
	{
		
		vector<int> toFill(0);
		vector<int> indices(0);
		int mm = seq.size();
		bool flags[seq.size()];
		f(i,mm) flags[i]=false;
		// printf("Here\n");
		f(i,seq.size())
		{
			if(seq[i]>0)
				flags[seq[i]-1]=true;
			else
				indices.push_back(i);
		}
		// printf("Here1\n");
		f(i,mm)
		{
			if(!flags[i])
				toFill.push_back(i+1);
		}
		// printf("Here2\n");
		// printf("Tofill:\n");
		// f(i,toFill.size()) printf("%d ",toFill[i]);
		// printf("\n");
		sort(toFill.begin(),toFill.end());
		int ans = 0;
		do
		{
			f(i,toFill.size())
			{
				seq[indices[i]] = toFill[i];
			}
			if(getStdness(seq) == sortedness)
				ans++;	
		// printf("Here4\n");

		}while(next_permutation(toFill.begin(),toFill.end()));
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	SortishDiv2 *obj;
	int answer;
	obj = new SortishDiv2();
	clock_t startTime = clock();
	answer = obj->ways(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {4,0,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {0,0,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	int t1[] = {1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	int t1[] = {1,2,0,5,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
